# Generated by Django 5.2.4 on 2025-08-25 18:51

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_name', models.CharField(db_index=True, max_length=200, verbose_name='City name')),
                ('city_id', models.CharField(max_length=200, verbose_name='City id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='city_photo/')),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
                'indexes': [models.Index(fields=['city_name'], name='city_name_index')],
            },
        ),
        migrations.CreateModel(
            name='Consert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consert_name', models.CharField(db_index=True, max_length=200, verbose_name='Consert name')),
                ('consert_id', models.CharField(max_length=200, verbose_name='Consert id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='consert_photo/')),
                ('cities', models.ManyToManyField(related_name='conserts', to='goticket.city')),
            ],
            options={
                'verbose_name': 'Consert',
                'verbose_name_plural': 'Conserts',
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('place_id', models.CharField(max_length=200, verbose_name='Place id')),
                ('place_name', models.TextField(db_index=True, max_length=200, verbose_name='Place name')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('photo', models.ImageField(blank=True, upload_to='place_photo/')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='places', to='goticket.city')),
            ],
            options={
                'verbose_name': 'Place',
                'verbose_name_plural': 'Places',
            },
        ),
        migrations.CreateModel(
            name='Singer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('singer_id', models.CharField(max_length=200, verbose_name='Singer id')),
                ('singer_name', models.CharField(db_index=True, max_length=200, verbose_name='Singer name')),
                ('event_time', models.DateField(verbose_name='Event time')),
                ('event_date', models.DateField(verbose_name='Event data')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='singer_photo/')),
                ('consert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='singers', to='goticket.consert')),
            ],
            options={
                'verbose_name': 'Singer',
                'verbose_name_plural': 'Singers',
            },
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sport_id', models.CharField(max_length=200)),
                ('sport_name', models.CharField(db_index=True, max_length=100, verbose_name='Type of sport')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='sport_photo/')),
                ('cities', models.ManyToManyField(related_name='sports', to='goticket.city')),
            ],
            options={
                'verbose_name': 'Sport',
                'verbose_name_plural': 'Sports',
            },
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('club_id', models.CharField(max_length=200, verbose_name='Club id')),
                ('event_time', models.DateField(verbose_name='Event time')),
                ('club_name', models.CharField(db_index=True, max_length=200, verbose_name='Club name')),
                ('event_date', models.DateField(verbose_name='Event data')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='club_photo/')),
                ('sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sports', to='goticket.sport')),
            ],
            options={
                'verbose_name': 'Club',
                'verbose_name_plural': 'Clubs',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=100, verbose_name='category')),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Price')),
                ('seat_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Seat number')),
                ('is_sold', models.BooleanField(default=False)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Ticket',
                'verbose_name_plural': 'Tickets',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('full_name', models.CharField(db_index=True, max_length=200, verbose_name='Full name')),
                ('phone', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'indexes': [models.Index(fields=['full_name', 'phone', 'email'], name='name_phone_email_index')],
            },
        ),
        migrations.AddIndex(
            model_name='consert',
            index=models.Index(fields=['consert_name'], name='consert_name_index'),
        ),
        migrations.AddIndex(
            model_name='place',
            index=models.Index(fields=['place_name'], name='place_name_index'),
        ),
        migrations.AddIndex(
            model_name='singer',
            index=models.Index(fields=['singer_name', 'event_time', 'event_date'], name='singer_event_time_date_index'),
        ),
        migrations.AddIndex(
            model_name='sport',
            index=models.Index(fields=['sport_name'], name='sport_name_index'),
        ),
        migrations.AddIndex(
            model_name='club',
            index=models.Index(fields=['club_name', 'event_date', 'event_time'], name='name_time_date_index'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['category'], name='category_index'),
        ),
        migrations.AddConstraint(
            model_name='ticket',
            constraint=models.UniqueConstraint(fields=('content_type', 'object_id', 'seat_number'), name='unique_seat'),
        ),
    ]
